import cv2
import mediapipe as mp
import numpy as np
import time

mp_pose = mp.solutions.pose
pose = mp_pose.Pose()
mp_drawing = mp.solutions.drawing_utils

cap = cv2.VideoCapture(0)

last_state = "Normal"
fall_timer = None

while True:
    ret, frame = cap.read()
    if not ret:
        break

    rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    result = pose.process(rgb)

    if result.pose_landmarks:
        landmarks = result.pose_landmarks.landmark

        # Get key heights
        shoulder_y = (landmarks[mp_pose.PoseLandmark.LEFT_SHOULDER].y +
                      landmarks[mp_pose.PoseLandmark.RIGHT_SHOULDER].y) / 2
        hip_y = (landmarks[mp_pose.PoseLandmark.LEFT_HIP].y +
                 landmarks[mp_pose.PoseLandmark.RIGHT_HIP].y) / 2

        body_angle = np.degrees(np.arctan2(
            abs(shoulder_y - hip_y),
            1e-6 + abs(landmarks[mp_pose.PoseLandmark.LEFT_HIP].x -
                        landmarks[mp_pose.PoseLandmark.LEFT_SHOULDER].x)
        ))

        # Normalize scale (camera-dependent)
        # A high shoulder_y means person is lower in frame (closer to lying)
        if body_angle < 25 and shoulder_y > 0.6:
            state = "Sleep"
        elif  shoulder_y > 0.8:
            state = "Fall"
        else:
            state = "Normal"

        # Draw
        mp_drawing.draw_landmarks(frame, result.pose_landmarks, mp_pose.POSE_CONNECTIONS)
        cv2.putText(frame, f"State: {state}", (30, 50),
                    cv2.FONT_HERSHEY_SIMPLEX, 1.2, (0, 255, 0), 3)
        last_state = state

    cv2.imshow("Elder Monitor", frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
